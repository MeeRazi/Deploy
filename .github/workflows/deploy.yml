name: Deploy to Render (Free Tier)
on:
  push:
    branches:
      - autofilter
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install jq curl -y
      
    - name: Check for existing Render service
      id: check-service
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        echo "Checking for existing services..."
        RESPONSE=$(curl -v -H "Authorization: Bearer $RENDER_API_KEY" \
          "https://api.render.com/v1/services?limit=20" 2>&1)
        
        # Print response status (excluding sensitive data)
        echo "API Response Headers:"
        echo "$RESPONSE" | grep -i "< HTTP\|< content-type:" || true
        
        # Try to parse service ID
        SERVICE_ID=$(echo "$RESPONSE" | grep -v "< " | jq -r '.[] | select(.name=="BotsyncAutofilterBot") | .id')
        echo "SERVICE_ID=${SERVICE_ID:-none}" >> $GITHUB_ENV
        
    - name: Create a new Render service
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        API_ID: ${{ secrets.API_ID }}
        API_HASH: ${{ secrets.API_HASH }}
        ADMINS: ${{ secrets.ADMINS }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHORTNER_SITE: ${{ secrets.SHORTNER_SITE }}
        SHORTNER_API: ${{ secrets.SHORTNER_API }}
        LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
        AUTH_GROUPS: ${{ secrets.AUTH_GROUPS }}
        DEFAULT_FSUB_CHANNEL: ${{ secrets.DEFAULT_FSUB_CHANNEL }}
        BIN_CHANNEL: ${{ secrets.BIN_CHANNEL }}
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        echo "Preparing to create service..."
        
        # Create JSON payload
        JSON_DATA='{
          "name": "BotsyncAutofilterBot",
          "type": "web_service",
          "runtime": "docker",
          "owner": "usr_abc123",
          "repo": "https://github.com/MeeRazi/AutoFilter",
          "branch": "main",
          "envVars": [
            {"key": "BOT_TOKEN", "value": "'"$BOT_TOKEN"'"},
            {"key": "API_ID", "value": "'"$API_ID"'"},
            {"key": "API_HASH", "value": "'"$API_HASH"'"},
            {"key": "ADMINS", "value": "'"$ADMINS"'"},
            {"key": "DATABASE_URL", "value": "'"$DATABASE_URL"'"},
            {"key": "SHORTNER_SITE", "value": "'"$SHORTNER_SITE"'"},
            {"key": "SHORTNER_API", "value": "'"$SHORTNER_API"'"},
            {"key": "LOG_CHANNEL", "value": "'"$LOG_CHANNEL"'"},
            {"key": "AUTH_GROUPS", "value": "'"$AUTH_GROUPS"'"},
            {"key": "DEFAULT_FSUB_CHANNEL", "value": "'"$DEFAULT_FSUB_CHANNEL"'"},
            {"key": "BIN_CHANNEL", "value": "'"$BIN_CHANNEL"'"},
            {"key": "GIT_TOKEN", "value": "'"$GIT_TOKEN"'"}
          ],
          "dockerfilePath": "./Dockerfile",
          "region": "oregon",
          "plan": "free"
        }'
        
        echo "JSON Payload Structure (sensitive values removed):"
        echo "$JSON_DATA" | jq 'del(.envVars[].value)'
        
        echo "Making API request to create service..."
        RESPONSE=$(curl -v -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_DATA" \
          "https://api.render.com/v1/services" 2>&1)
        
        # Print response status and headers (excluding sensitive data)
        echo "API Response Headers:"
        echo "$RESPONSE" | grep -i "< HTTP\|< content-type:" || true
        
        # Get the response body (everything after the headers)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '1,/^[[:space:]]*$/d')
        
        echo "Response Body (if not null):"
        if [ ! -z "$RESPONSE_BODY" ]; then
          echo "$RESPONSE_BODY" | jq 'if type=="object" then del(.envVars[].value) else . end' || echo "Raw response: $RESPONSE_BODY"
        else
          echo "Empty response body"
        fi
        
        # Check if we got a successful response
        if echo "$RESPONSE" | grep -q "< HTTP/[0-9.]* 2[0-9][0-9]"; then
          echo "Service created successfully"
          if [ ! -z "$RESPONSE_BODY" ]; then
            SERVICE_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
            echo "Service ID: $SERVICE_ID"
          fi
        else
          echo "Error creating service. Check the response above for details."
          exit 1
        fi
