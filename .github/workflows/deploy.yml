name: Deploy to Render (Free Tier)
on:
  push:
    branches:
      - autofilter
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install jq curl -y
      
    - name: Check for existing Render service
      id: check-service
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        echo "Checking for existing services..."
        # Get the response without verbose output
        RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
          "https://api.render.com/v1/services?limit=20")
        
        # Check HTTP status with a separate call
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          "https://api.render.com/v1/services?limit=20")
        
        echo "HTTP Status: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          # Try to parse service ID from the clean JSON response
          SERVICE_ID=$(echo "$RESPONSE" | jq -r '.[] | select(.name=="BotsyncAutofilterBot") | .id')
          if [ -n "$SERVICE_ID" ] && [ "$SERVICE_ID" != "null" ]; then
            echo "Found existing service with ID: $SERVICE_ID"
          else
            echo "No existing service found"
          fi
          echo "SERVICE_ID=${SERVICE_ID:-none}" >> $GITHUB_ENV
        else
          echo "Error: API request failed with status $HTTP_STATUS"
          exit 1
        fi
      
    - name: Create a new Render service
      if: env.SERVICE_ID == 'none'
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        API_ID: ${{ secrets.API_ID }}
        API_HASH: ${{ secrets.API_HASH }}
        ADMINS: ${{ secrets.ADMINS }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHORTNER_SITE: ${{ secrets.SHORTNER_SITE }}
        SHORTNER_API: ${{ secrets.SHORTNER_API }}
        LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
        AUTH_GROUPS: ${{ secrets.AUTH_GROUPS }}
        DEFAULT_FSUB_CHANNEL: ${{ secrets.DEFAULT_FSUB_CHANNEL }}
        BIN_CHANNEL: ${{ secrets.BIN_CHANNEL }}
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        echo "Creating new service..."
        
        # Create JSON payload using a variable
        JSON_DATA='{
          "name": "BotsyncAutofilterBot",
          "type": "web_service",
          "ownerID": "${{ secrets.RENDER_OWNER_ID }}",
          "serviceDetails": {
            "env": "docker",
            "region": "oregon",
            "buildCommand": "",
            "startCommand": "",
            "envVars": [
              {"key": "BOT_TOKEN", "value": "'"$BOT_TOKEN"'"},
              {"key": "API_ID", "value": "'"$API_ID"'"},
              {"key": "API_HASH", "value": "'"$API_HASH"'"},
              {"key": "ADMINS", "value": "'"$ADMINS"'"},
              {"key": "DATABASE_URL", "value": "'"$DATABASE_URL"'"},
              {"key": "SHORTNER_SITE", "value": "'"$SHORTNER_SITE"'"},
              {"key": "SHORTNER_API", "value": "'"$SHORTNER_API"'"},
              {"key": "LOG_CHANNEL", "value": "'"$LOG_CHANNEL"'"},
              {"key": "AUTH_GROUPS", "value": "'"$AUTH_GROUPS"'"},
              {"key": "DEFAULT_FSUB_CHANNEL", "value": "'"$DEFAULT_FSUB_CHANNEL"'"},
              {"key": "BIN_CHANNEL", "value": "'"$BIN_CHANNEL"'"},
              {"key": "GIT_TOKEN", "value": "'"$GIT_TOKEN"'"}
            ],
            "dockerfile": "./Dockerfile",
            "repo": "https://github.com/MeeRazi/AutoFilter",
            "branch": "main",
            "autoDeploy": "yes",
            "plan": "free"
          }
        }'
        
        # Send create request and capture response
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_DATA" \
          "https://api.render.com/v1/services")
        
        # Check response status
        HTTP_STATUS=$(curl -s -X POST -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_DATA" \
          "https://api.render.com/v1/services")
        
        if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
          echo "Service created successfully"
          SERVICE_ID=$(echo "$RESPONSE" | jq -r '.id')
          if [ -n "$SERVICE_ID" ] && [ "$SERVICE_ID" != "null" ]; then
            echo "New service ID: $SERVICE_ID"
          fi
        else
          echo "Error creating service. Status code: $HTTP_STATUS"
          echo "Response: $RESPONSE"
          exit 1
        fi
