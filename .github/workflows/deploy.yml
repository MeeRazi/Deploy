name: Deploy to Render (Free Tier)
on:
  push:
    branches:
      - autofilter
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install jq -y
      
    - name: Check for existing Render service
      id: check-service
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        SERVICES=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services?limit=20")
        SERVICE_ID=$(echo "$SERVICES" | jq -r '.[] | select(.name=="BotsyncAutofilterBot") | .id')
        echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
        
    - name: Delete existing service (if exists)
      if: ${{ env.SERVICE_ID != '' }}
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        SERVICE_ID: ${{ env.SERVICE_ID }}
      run: |
        curl -s -X DELETE -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/$SERVICE_ID"
        echo "Deleted existing service with ID: $SERVICE_ID"
        # Wait for deletion to complete
        sleep 10
        
    - name: Create a new Render service
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        API_ID: ${{ secrets.API_ID }}
        API_HASH: ${{ secrets.API_HASH }}
        ADMINS: ${{ secrets.ADMINS }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SHORTNER_SITE: ${{ secrets.SHORTNER_SITE }}
        SHORTNER_API: ${{ secrets.SHORTNER_API }}
        LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
        AUTH_GROUPS: ${{ secrets.AUTH_GROUPS }}
        DEFAULT_FSUB_CHANNEL: ${{ secrets.DEFAULT_FSUB_CHANNEL }}
        BIN_CHANNEL: ${{ secrets.BIN_CHANNEL }}
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        # Create JSON payload
        JSON_DATA=$(cat <<EOF
        {
          "name": "BotsyncAutofilterBot",
          "type": "web_service",
          "runtime": "docker",
          "repo": "https://github.com/MeeRazi/AutoFilter",
          "branch": "main",
          "envVars": [
            {"key": "BOT_TOKEN", "value": "$BOT_TOKEN"},
            {"key": "API_ID", "value": "$API_ID"},
            {"key": "API_HASH", "value": "$API_HASH"},
            {"key": "ADMINS", "value": "$ADMINS"},
            {"key": "DATABASE_URL", "value": "$DATABASE_URL"},
            {"key": "SHORTNER_SITE", "value": "$SHORTNER_SITE"},
            {"key": "SHORTNER_API", "value": "$SHORTNER_API"},
            {"key": "LOG_CHANNEL", "value": "$LOG_CHANNEL"},
            {"key": "AUTH_GROUPS", "value": "$AUTH_GROUPS"},
            {"key": "DEFAULT_FSUB_CHANNEL", "value": "$DEFAULT_FSUB_CHANNEL"},
            {"key": "BIN_CHANNEL", "value": "$BIN_CHANNEL"},
            {"key": "GIT_TOKEN", "value": "$GIT_TOKEN"}
          ],
          "dockerfilePath": "./Dockerfile",
          "region": "oregon",
          "plan": "free"
        }
        EOF
        )
        
        # Create the service
        echo "Creating service..."
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_DATA" \
          "https://api.render.com/v1/services")
        
        # Debug output (masked)
        echo "API Response:"
        echo "$RESPONSE" | jq 'del(.envVars[].value)'
        
        # Check for errors
        if echo "$RESPONSE" | jq -e 'has("id")' >/dev/null; then
          SERVICE_ID=$(echo "$RESPONSE" | jq -r '.id')
          echo "Service created successfully with ID: $SERVICE_ID"
        else
          echo "Error creating service. Response:"
          echo "$RESPONSE"
          exit 1
        fi
